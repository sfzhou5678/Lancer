{"version":3,"sources":["Modules/DataService.js","App.js","registerServiceWorker.js","index.js"],"names":["state","nodeMap","Map","relationMap","nodeGroupSet","Set","cumulatedData","nodes","links","rootNodes","addObject","obj","isLink","push","DefaultNode","id","concat","Date","now","name","DataService","fetchData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","buffer","text","lines","partIndex","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","line","splitResult","_splitResult$map","_splitResult$map2","headEntityId","relationEntityId","rearEntityId","link","_splitResult","_splitResult$map3","_splitResult$map4","entityId","synonym","entity","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","entry","_entry","key","newRoot","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_link","wrap","_context","prev","next","fetch","sent","split","undefined","Symbol","iterator","done","value","abrupt","startsWith","length","Error","map","str","trim","slicedToArray","source","target","relation","has","set","add","charAt","t0","return","finish","console","warn","t1","get","t2","stop","this","apply","arguments","getCurrentData","getRelationMap","getNodeGroupSet","randomColor","require","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","isDataLoaded","selectOptions","selectedOption","globalGraph","emitter","isSelected","selectedData","subGraph","toFocus","selectionHistory","selectedState","currentSelectedIndex","depth","toFocusMain","toFocusNode","mainClearSelectionFunc","linkTipPara","top","left","isVisible","content","fullScreenNotification","canvasSize","canvasHeight","canvasWidth","init","_ref2","name2Node","id2Node","id2RelatedIds","node","addLink","key2colorMap","name1","name2","log","target_map","luminosity","hue","result","keys","toConsumableArray","colors","count","index","relation2color","nodeGroup2color","handleSelectChange","setState","forceUpdate","getGraphDataBySelected","focusOnMain","rootName","rootNode","rootId","ids","to_extend_ids","current_depth","extended_ids","_i","err","values","filter","getDepth","generateNodeLabel","generateLinkLabel","then","e","mouseLocation","x","screenX","y","screenY","_this2","setTimeout","_this2$refs$myImgCont","refs","myImgContainer","clientHeight","clientWidth","canvas_height","canvas_width","_this3","_this$state$canvasSiz","react_default","createElement","className","onMouseMove","_onMouseMove","bind","style","display","placeholder","min","max","type","onChange","evt","parseInt","Math","height","Autocomplete_default","getItemValue","item","items","renderItem","isHighlighted","background","onSelect","val","inputProps","menuStyle","borderRadius","boxShadow","padding","fontSize","position","overflow","maxHeight","zIndex","button_default","color","onClick","ref","width","react_force_graph_2d","graphData","nodeCanvasObject","ctx","globalScale","bestCircleR","beginPath","arc","PI","group","fillStyle","fill","drawNode","label","font","measureText","textAlign","textBaseline","fillText","drawText","linkColor","el","fg","cooldownTime","onEngineTick","onEngineStop","x_min","x_max","y_min","y_max","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","x_radio","y_radio","radio","zoom","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","center","centerAt","linkLabel","nodeLabel","onLinkHover","enableNodeDrag","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ce1791a0.chunk.js","sourcesContent":["import 'whatwg-fetch'\r\n\r\nconst state = {\r\n    nodeMap: new Map(),\r\n    relationMap: new Map(),\r\n    nodeGroupSet: new Set(),\r\n    cumulatedData: {\r\n        nodes: [],\r\n        links: [],\r\n        rootNodes: []\r\n    }\r\n};\r\n\r\nconst addObject = (obj, isLink) => {\r\n    (isLink ? state.cumulatedData.links : state.cumulatedData.nodes).push(obj);\r\n};\r\n\r\nconst DefaultNode = {\r\n    id: `default${Date.now()}`,\r\n    name: `this node is not found`\r\n};\r\n\r\nconst getDefaultNode = (id) => {\r\n    return {\r\n        id: id,\r\n        name: id\r\n    };\r\n};\r\n\r\nconst fetchData = async () => {\r\n    const buffer = await fetch(\"http://localhost:8080/full_graph\");\r\n    const text = await buffer.text();\r\n    // console.log(text);\r\n    const lines = text.split(/\\n/);\r\n    let partIndex = 0;\r\n    // console.log(lines);\r\n    for (const line of lines) {\r\n        if (line === \"\") {\r\n            continue;\r\n        }\r\n        if (line.startsWith(\"split\")) {//meet empty line, this is a sign of new part\r\n            partIndex += 1;\r\n            continue;\r\n        }\r\n        if (partIndex === 1) {//triple part\r\n            const splitResult = line.split(/\\t/);\r\n            if (splitResult.length !== 3) {\r\n                throw Error(`wrong data format encountered: ${line}`);\r\n            }\r\n            const [headEntityId, relationEntityId, rearEntityId] = splitResult.map(str => str.trim());\r\n            const link = {\r\n                source: headEntityId,\r\n                target: rearEntityId,\r\n                relation: relationEntityId,\r\n                value: 4\r\n            };\r\n            // console.log(`new link`, link);\r\n            if (!state.nodeMap.has(headEntityId)) {\r\n                continue;\r\n            }\r\n            if (!state.nodeMap.has(rearEntityId)) {\r\n                continue;\r\n            }\r\n            if (!state.relationMap.has(relationEntityId)) {\r\n                continue;\r\n            }\r\n\r\n            // state.cumulatedData.links.push(link);//TODO: remove old link if this is an update operation\r\n            addObject(link, true);\r\n        } else if (partIndex === 0) {//entity info part\r\n            const splitResult = line.split(/\\t/);\r\n            if (splitResult.length !== 3) {\r\n                throw Error(`wrong data format encountered: ${line}`);\r\n            }\r\n            const [entityId, name, synonym] = splitResult.map(str => str.trim());\r\n            const entity = {\r\n                id: entityId,\r\n                name,\r\n                synonym\r\n            };\r\n            // console.log(`new entity`, entity);\r\n            if (entityId.startsWith(\"R\")) {\r\n                state.relationMap.set(entityId, entity);\r\n            } else {\r\n                state.nodeGroupSet.add(entityId.charAt(0));\r\n                state.nodeMap.set(entityId, entity);\r\n                // state.cumulatedData.nodes.push(entity);\r\n                addObject(entity, false);\r\n            }\r\n        }\r\n    }\r\n    // console.log(lines);\r\n    for (const entry of state.nodeMap) {\r\n        const [key, value] = entry;\r\n        if (value === DefaultNode) {\r\n            console.warn(`key:${key} has no related entity`);\r\n            const newRoot = getDefaultNode(key);\r\n            state.cumulatedData.rootNodes.push(newRoot);\r\n            state.cumulatedData.nodes.push(newRoot);\r\n            addObject(newRoot, false);\r\n        }\r\n    }\r\n    for (const link of state.cumulatedData.links) {\r\n        link.entity = state.relationMap.get(link.relation);\r\n    }\r\n};\r\n\r\nconst getCurrentData = () => {\r\n    // console.log(`getCurrentData`);\r\n    // console.log(state.cumulatedData);\r\n    return state.cumulatedData;\r\n};\r\n\r\nconst getRelationMap = () => {\r\n    // console.log(`getCurrentData`);\r\n    // console.log(state.cumulatedData);\r\n    return state.relationMap;\r\n};\r\n\r\nconst getNodeGroupSet = () => {\r\n    return state.nodeGroupSet;\r\n};\r\n\r\nexport default {\r\n    fetchData,\r\n    getCurrentData,\r\n    getRelationMap,\r\n    getNodeGroupSet\r\n}","import React, {Component} from 'react';\r\nimport './App.css';\r\nimport DataService from \"./Modules/DataService\";\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport Button from 'muicss/lib/react/button';\r\nimport \"muicss/dist/css/mui.css\";\r\nimport Autocomplete from 'react-autocomplete';\r\nimport ForceGraph2D from \"react-force-graph/src/packages/react-force-graph-2d\";\r\n\r\nconst randomColor = require('randomcolor');\r\n\r\nclass App extends Component {\r\n    state = {\r\n        isDataLoaded: false,\r\n        selectOptions: [],\r\n        selectedOption: null,\r\n        globalGraph: {\r\n            emitter: null,\r\n            isSelected: false,\r\n            selectedData: [],\r\n            subGraph: {\r\n                nodes: [],\r\n                links: [],\r\n                rootNodes: []\r\n            },\r\n            toFocus: null\r\n        },\r\n        selectionHistory: {\r\n            selectedState: [],\r\n            currentSelectedIndex: 0\r\n        },\r\n        depth: 3,\r\n        toFocus: \"\",\r\n        toFocusMain: \"\",\r\n        toFocusNode: null,\r\n        mainClearSelectionFunc: null,\r\n        linkTipPara: {\r\n            top: 0, left: 0, isVisible: false, content: \"\"\r\n        },\r\n        fullScreenNotification: null,\r\n        canvasSize: {canvasHeight: 800, canvasWidth: 1800}\r\n    };\r\n\r\n    constructor() {\r\n        super();\r\n        this.init().then();\r\n    }\r\n\r\n    init = async () => {\r\n        this.state.fullScreenNotification = \"加载数据中\";\r\n        //fetch data\r\n        await DataService.fetchData();\r\n\r\n        const {nodes, links} = await DataService.getCurrentData();\r\n        //generate data\r\n        const name2Node = new Map();\r\n        const id2Node = new Map();\r\n        const id2RelatedIds = new Map();\r\n        for (let node of nodes) {\r\n            name2Node.set(node.name, node);\r\n            id2Node.set(node.id, node);\r\n        }\r\n        const addLink = (name1, name2) => {\r\n            if (id2RelatedIds.has(name1)) {\r\n                id2RelatedIds.set(name1, id2RelatedIds.get(name1).concat(name2));\r\n            } else {\r\n                id2RelatedIds.set(name1, [name2]);\r\n            }\r\n        };\r\n        for (let link of links) {\r\n            addLink(link.source, link.target);\r\n            addLink(link.target, link.source);\r\n        }\r\n\r\n        this.state.name2Node = name2Node;\r\n        this.state.id2RelatedIds = id2RelatedIds;\r\n        this.state.id2Node = id2Node;\r\n        console.log(name2Node, id2RelatedIds, id2Node);\r\n\r\n        //color map\r\n        const key2colorMap = (target_map, luminosity = \"random\", seed = 1, hue = \"random\") => {\r\n            const result = new Map();\r\n            const keys = [...target_map.keys()];\r\n            const colors = randomColor({\r\n                count: keys.length,\r\n                luminosity: luminosity,\r\n                // seed: seed\r\n                hue: hue\r\n            });\r\n            for (let index = 0; index < keys.length; ++index) {\r\n                result.set(keys[index], colors[index]);\r\n            }\r\n            return result;\r\n        };\r\n\r\n        this.state.relation2color = key2colorMap(DataService.getRelationMap(), \"random\", 3, '#00FFFF');\r\n        this.state.nodeGroup2color = key2colorMap(DataService.getNodeGroupSet(), \"dark\", 2);\r\n        console.log(`relation2color=`, this.state.relation2color, `nodeGroup2color=`, this.state.nodeGroup2color);\r\n\r\n        this.state.fullScreenNotification = null;\r\n    };\r\n\r\n    handleSelectChange = (selectedOption) => {\r\n        this.setState({selectedOption: selectedOption});\r\n        console.log(`Option selected:`, selectedOption);\r\n        this.forceUpdate();\r\n    };\r\n\r\n    _onMouseMove(e) {\r\n        this.setState({mouseLocation: {x: e.screenX, y: e.screenY}});\r\n    }\r\n\r\n    getGraphDataBySelected = () => {\r\n        return DataService.getCurrentData();\r\n    };\r\n\r\n    focusOnMain = () => {\r\n        console.log(`focusOn called, ${this.state.toFocusMain}`);\r\n        this.state.toFocusNode = this.state.toFocusMain;\r\n        const subGraph = {};\r\n        const rootName = this.state.toFocusMain;\r\n        const depth = this.state.depth;\r\n        const rootNode = this.state.name2Node.get(rootName);\r\n        if (!rootNode) {\r\n            return;\r\n        }\r\n        const rootId = rootNode.id;\r\n        const ids = new Set([rootId]);\r\n        let to_extend_ids = [rootId];\r\n\r\n        for (let current_depth = 0; current_depth < depth && to_extend_ids.length > 0; ++current_depth) {\r\n            let extended_ids = [];\r\n            // console.log(`to_extend_ids=`, to_extend_ids);\r\n            for (let id of to_extend_ids) {\r\n                const node = this.state.id2Node.get(id);\r\n                if (node) {\r\n                    extended_ids = extended_ids.concat(this.state.id2RelatedIds.get(node.id) || []);\r\n                }\r\n            }\r\n            // console.log(`extended_ids=`, extended_ids);\r\n            for (const id of extended_ids) {\r\n                ids.add(id);\r\n            }\r\n            to_extend_ids = extended_ids;\r\n        }\r\n        // console.log(`ids=`, ids);\r\n        subGraph.nodes = [...ids.values()].map(id => {\r\n            return this.state.id2Node.get(id);\r\n        }).filter(node => {\r\n            return node;\r\n        });\r\n\r\n        subGraph.links = DataService.getCurrentData().links.filter(link => {\r\n            return (ids.has(link.source) || (link.source && ids.has(link.source.id)))\r\n                && (ids.has(link.target) || (link.target && ids.has(link.target.id)));\r\n        });\r\n\r\n        this.state.globalGraph.subGraph = subGraph;\r\n\r\n        console.log(`subGraph=`, subGraph);\r\n\r\n        this.forceUpdate();\r\n    };\r\n\r\n    getDepth = () => {\r\n        return this.state.depth;\r\n    };\r\n\r\n    generateNodeLabel = (node) => {\r\n        return `<div><span>名称: ${node.name}</span><br><span>id:${node.id}</span></div>`;\r\n    };\r\n\r\n    generateLinkLabel = (link) => {\r\n        const name = (DataService.getRelationMap().get(link.relation) || {name: \"未指定\"}).name;\r\n        return `<div><span>名称: ${name}</span><br><span>id:${link.relation}</span></div>`;\r\n    };\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            let {clientHeight: canvasHeight, clientWidth: canvasWidth} = this.refs.myImgContainer;\r\n            //TODO: use Math.min\r\n            this.state.canvasSize = {canvas_height: canvasHeight - 50, canvas_width: canvasWidth - 50};\r\n            this.setState({canvasSize: this.state.canvasSize});\r\n            console.log(canvasHeight, canvasWidth);\r\n        }, 1000);//TODO: using 1000 is not a good practise\r\n\r\n    }\r\n\r\n    render() {\r\n        const {canvas_width, canvas_height} = this.state.canvasSize;\r\n        // console.log(`this.state.canvasSize=`, this.state.canvasSize);\r\n        return <div className=\"App\" onMouseMove={this._onMouseMove.bind(this)}>\r\n            <div>\r\n                <p style={{display: 'inline-block'}}>Degree:</p>\r\n                <input placeholder={\"节点拓展深度\"} min={0} max={5}\r\n                       value={this.state.depth}\r\n                       type={\"number\"}\r\n                       onChange={(evt) => {\r\n                           const depth = parseInt(evt.target.value);//TODO: float\r\n                           this.setState({\r\n                               depth: Math.min(Math.max(depth, 0), 5)\r\n                           });\r\n                       }}\r\n                       style={{height: \"30px\"}}/>\r\n                <p style={{display: 'inline-block'}}>Choose a library:</p>\r\n                <Autocomplete\r\n                    getItemValue={(item) => item.name}\r\n                    items={DataService.getCurrentData().nodes}\r\n                    renderItem={(item, isHighlighted) =>\r\n                        <div style={{background: isHighlighted ? 'lightgray' : 'white'}} key={item.id}>\r\n                            {`${item.name} | ${item.id}`}\r\n                        </div>\r\n                    }\r\n                    value={this.state.toFocusMain}\r\n                    onChange={(evt) => {\r\n                        this.setState({\r\n                            toFocusMain: evt.target.name\r\n                        });\r\n                    }}\r\n                    onSelect={(val) => {\r\n                        this.setState({\r\n                            toFocusMain: val\r\n                        });\r\n                    }}\r\n                    inputProps={{style: {height: \"30px\"}}}\r\n                    menuStyle={{\r\n                        borderRadius: '3px',\r\n                        boxShadow: '0 2px 12px rgba(0, 0, 0, 0.1)',\r\n                        background: 'rgba(255, 255, 255, 0.9)',\r\n                        padding: '2px 0',\r\n                        fontSize: '90%',\r\n                        position: 'fixed',\r\n                        overflow: 'auto',\r\n                        maxHeight: '50%', // TODO: don't cheat, let it flow to the bottom\r\n                        zIndex: '10',\r\n                    }}\r\n                />\r\n                <Button color=\"primary\" onClick={() => {\r\n                    this.focusOnMain();\r\n                }}>Locate\r\n                </Button>\r\n            </div>\r\n            <div ref=\"myImgContainer\" style={{width: \"100%\", height: \"95%\"}}>\r\n                <ForceGraph2D\r\n                    width={canvas_width}\r\n                    height={canvas_height}\r\n                    graphData={this.state.globalGraph.subGraph}\r\n                    nodeCanvasObject={(node, ctx, globalScale) => {\r\n                        const fontSize = 12 / globalScale;\r\n\r\n                        const bestCircleR = 4.5 * fontSize;\r\n                        node.bestCircleR = bestCircleR;\r\n\r\n                        const drawNode = () => {\r\n\r\n                            //draw outer ring\r\n                            ctx.beginPath();\r\n                            ctx.arc(node.x, node.y, bestCircleR * 1.05, 0, 2 * Math.PI, false);//draw a bigger circle around the node\r\n                            const group = node.id.charAt(0);\r\n                            ctx.fillStyle = this.state.nodeGroup2color.get(group) || \"black\";\r\n                            // console.log(ctx.fillStyle);\r\n                            ctx.fill();\r\n                            //draw a ring with default color\r\n                            ctx.beginPath();\r\n                            ctx.arc(node.x, node.y, bestCircleR, 0, 2 * Math.PI, false);\r\n                            ctx.fillStyle = `white`;\r\n                            ctx.fill();\r\n                        };\r\n\r\n                        drawNode();\r\n\r\n                        const drawText = () => {\r\n                            const label = node.name;\r\n                            ctx.font = `${fontSize}px Sans-Serif`;\r\n                            const textWidth = ctx.measureText(label).width;\r\n                            // const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // some padding\r\n                            // ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\r\n                            // ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\r\n                            ctx.textAlign = 'center';\r\n                            ctx.textBaseline = 'middle';\r\n                            ctx.fillStyle = 'black';\r\n                            ctx.fillText(label, node.x, node.y);\r\n                        };\r\n\r\n                        drawText();\r\n\r\n                    }}\r\n                    linkColor={(link) => {\r\n                        return this.state.relation2color.get(link.relation);\r\n                    }}\r\n                    ref={el => {\r\n                        this.fg = el;\r\n                    }}\r\n                    cooldownTime={3000}\r\n                    onEngineTick={() => {\r\n                        const nodes = this.state.globalGraph.subGraph.nodes;\r\n                        if (nodes.length === 0) {\r\n                            return;\r\n                        }\r\n                        this.setState({fullScreenNotification: \"力图计算中\"});\r\n                    }}\r\n                    onEngineStop={() => {\r\n                        console.log(`onEngineStop`);\r\n                        const nodes = this.state.globalGraph.subGraph.nodes;\r\n                        if (nodes.length === 0) {\r\n                            return;\r\n                        }\r\n\r\n                        let x_min = nodes[0].x, x_max = nodes[0].x, y_min = nodes[0].y, y_max = nodes[0].y;\r\n                        for (const node of nodes) {\r\n                            x_min = Math.min(x_min, node.x);\r\n                            y_min = Math.min(y_min, node.y);\r\n                            x_max = Math.max(x_max, node.x);\r\n                            y_max = Math.max(y_max, node.y);\r\n                        }\r\n                        //zoom\r\n                        const x_radio = canvas_width / (x_max - x_min);\r\n                        const y_radio = canvas_height / (y_max - y_min);\r\n                        const radio = 0.9 * Math.min(x_radio, y_radio);\r\n                        if (nodes.length !== 1) {\r\n                            this.fg.zoom(radio);\r\n                        }\r\n                        //center\r\n                        for (const node of nodes) {\r\n                            x_min = Math.min(x_min, node.x);\r\n                            y_min = Math.min(y_min, node.y);\r\n                            x_max = Math.max(x_max, node.x);\r\n                            y_max = Math.max(y_max, node.y);\r\n                        }\r\n                        const center = {x: (x_min + x_max) / 2, y: (y_min + y_max) / 2};\r\n                        this.fg.centerAt(center.x, center.y);\r\n                        this.setState({fullScreenNotification: null});\r\n                    }}\r\n                    linkLabel={this.generateLinkLabel}\r\n                    nodeLabel={this.generateNodeLabel}\r\n                    onLinkHover={(link) => {\r\n                        if (link) {\r\n                            this.setState({\r\n                                linkTipPara: {\r\n                                    top: this.state.mouseLocation.y,\r\n                                    left: this.state.mouseLocation.x,\r\n                                    isVisible: true,\r\n                                    content: null\r\n                                }\r\n                            });\r\n                        } else {\r\n                            this.setState({\r\n                                linkTipPara: {\r\n                                    isVisible: false\r\n                                }\r\n                            });\r\n                        }\r\n                    }}\r\n                    enableNodeDrag={false}\r\n                    // enableZoomPanInteraction={false}\r\n                />\r\n                {\r\n                    this.state.fullScreenNotification && <div className=\"center-screen\">\r\n                        {this.state.fullScreenNotification}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}